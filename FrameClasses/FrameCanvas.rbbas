#tag ClassProtected Class FrameCanvasInherits Canvas	#tag Event		Function ConstructContextualMenu(base as MenuItem, x as Integer, y as Integer) As Boolean		  if activeFrame = nil then Return False		  		  base.Append(new MenuItem("Remove "+activeFrame.Title))		  Return true		End Function	#tag EndEvent	#tag Event		Function MouseDown(X As Integer, Y As Integer) As Boolean		  //are we starting a link?		  linking = Keyboard.AsyncOptionKey and not IsContextualClick		  		  activeFrame = nil		  		  //forward the event to the frames.		  for i as Integer = UBound(Frames) DownTo 0		    if Frames(i).MouseDown(x, y, self) then 		      activeFrame = Frames(i)		      Frames.Remove(i)		      Frames.Append(activeFrame)		      linking = linking and activeFrame<>nil and activeFrame.selectedObject <> nil		      Return true and not IsContextualClick		    end if		  next		  		  		End Function	#tag EndEvent	#tag Event		Sub MouseDrag(X As Integer, Y As Integer)		  //if not linking, perform a simple drag		  if not linking then 		    activeFrame.MouseDrag(x,y)		    Refresh False		    Return		  end if		  		  linkx = x		  linky = y		  		  //display drag feedback		  destinationFrame = nil		  for i as Integer = UBound(frames) DownTo 0 		    if frames(i) = activeFrame then Continue for		    if Frames(i).MouseMove(x,y) then		      destinationFrame = Frames(i)		      Exit for		    end if		  next		  		  Refresh False		End Sub	#tag EndEvent	#tag Event		Sub MouseUp(X As Integer, Y As Integer)		  //check if we ended up  with a valid link		  if activeFrame <> nil and activeFrame.selectedObject <> nil and destinationFrame <> nil and destinationFrame.selectedObject <> nil then		    if addLink(activeFrame, destinationFrame) then		      LinkPerformed(activeFrame, destinationFrame)		    end if		  end if		  		  //reset		  linking = False		  for i as Integer = UBound(Frames) DownTo 0		    Frames(i).MouseUp(x, y)		  next		  		  Refresh False		End Sub	#tag EndEvent	#tag Event		Sub Open()		  //links is a Dictionary that checks for duplicate links		  links = new Dictionary		  Open		End Sub	#tag EndEvent	#tag Event		Sub Paint(g As Graphics)		  #pragma DisableBackgroundTasks		  #pragma DisableBoundsChecking		  		  dim fromx, fromy, tox, toy as Integer		  		  g.ForeColor = &cffffff		  g.FillRect 0,0,g.Width,g.Height		  		  if drawGrid then		     'e8e8e8		    dim lines as Integer		    for x as Integer = 0 to Width step GridSize		      if lines = 8 then		        g.ForeColor = &ce8e8e8		        lines = 0		      else		        g.ForeColor = &cf2f2f2		      end if		      g.DrawLine x, 0, x, Height		      lines = lines + 1		    next		    lines = 0		    		    for y as Integer = 0 to Height step GridSize		      if lines = 8 then		        g.ForeColor = &ce8e8e8		        lines = 0		      else		        g.ForeColor = &cf2f2f2		      end if		      g.DrawLine 0, y, Width, y		      lines = lines + 1		    next		  end if		  		  //draw all links first		  dim tmp as link		  for Each tmp in linkedObjects		    		    fromx = tmp.fromFrame.x + tmp.fromObject.outLinkX + 6		    fromy = tmp.fromFrame.y + tmp.fromObject.outLinkY + 1		    		    tox = tmp.toFrame.x + tmp.toObject.inLinkX + 1		    toy =  tmp.toFrame.y + tmp.toObject.inLinkY + 1		    		    drawLink(g, fromx, fromy, tox, toy)		  next		  		  //then the contents		  for i as Integer = 0 to UBound(Frames)		    Frames(i).doPaint(g)		  next		  		  //and finally, draw the link feedback if there's a link being created		  if linking then		    fromx = activeFrame.x		    fromy = activeFrame.y		    		    fromx = fromx + activeFrame.selectedObject.outLinkX		    fromy = fromy + activeFrame.selectedObject.outLinkY		    		    if destinationFrame <> nil then		      linkx = destinationFrame.x + destinationFrame.selectedObject.inLinkX		      linky = destinationFrame.y + destinationFrame.selectedObject.inLinkY		    end if		    		    drawLink(g, fromx, fromy, linkx, linky, false, 3, 80, &c888888, &c2F75D8)		  end if		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Function addLink(srcFrame as contentFrame, dstFrame as contentFrame) As boolean		  return addLink(srcFrame, srcFrame.selectedObject, dstFrame, dstFrame.selectedObject)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function addLink(srcFrame as contentFrame, srcObjectID as variant, dstFrame as contentFrame, dstObjectID as variant) As boolean		  if srcFrame = nil or dstFrame = nil then Return False		  		  srcFrame.selectObject srcObjectID		  dstFrame.selectObject dstObjectID		  		  dim items as Dictionary		  		  //check for duplicates		  dim srcObject, dstObject as FrameObject		  srcObject = srcFrame.selectedObject		  dstObject = dstFrame.selectedObject		  		  //check if there's links starting from the srcFrame		  if links.HasKey(srcObject) then		    items = links.Value(srcObject)		  else		    items = new Dictionary		  end if		  		  //duplicate found?		  if items.HasKey(dstObject) then		    Return False		  end if		  		  //no duplicates, add to the duplicate-checker and to the link array		  items.Value(dstObject) = 0		  links.value(srcObject) = items		  		  srcObject.incrementOutputs		  dstObject.incrementInputs		  		  dim tmp as new link		  tmp.fromFrame = srcFrame		  tmp.fromObject = srcObject		  tmp.toFrame = dstFrame		  tmp.toObject = dstObject		  		  linkedObjects.Append tmp		  		  srcFrame.checkObjectLocations		  dstFrame.checkObjectLocations		  		  srcFrame.selectedObject = nil		  dstFrame.selectedObject = nil		  Return true		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub appendFrame(frame as contentFrame)		  Frames.Append(Frame)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Contents() As contentFrame()		  Return frames		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub drawLink(g as graphics, fromX as integer, fromY as integer, toX as integer, toY as integer, border as boolean = true, size as integer = 3, opacity as integer = 100, borderColor as color = &c888888, fillColor as color = &cFFF965)		  //draws a link between 2 objects		  #pragma DisableBackgroundTasks		  #pragma DisableBoundsChecking		  		  dim c as new CurveShape		  c.ControlX(0) = 50		  c.ControlY(0) = 0		  		  c.Order = 2		  c.x = 0		  c.y = 0		  c.X2 = tox - fromx - 1		  c.Y2 = toy - fromy		  		  c.ControlX(1) = c.x2 - 50		  c.ControlY(1) = c.Y2		  		  c.Border = opacity		  		  if border then		    c.BorderColor = borderColor		    c.BorderWidth = size + 2		    		    g.DrawObject c, fromx + 1, fromy + 1		  end if		  		  c.BorderColor = fillColor		  c.BorderWidth = size		  		  g.DrawObject c, fromx + 1, fromy + 1		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function findFrame(frameTitle as string) As ContentFrame		  dim index as Integer = frameIndex(frameTitle)		  if index < 0 then Return nil		  		  Return frames(index)		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function frameIndex(frameTitle as string) As integer		  for i as Integer = 0 to UBound(Frames)		    if frames(i).Title = frameTitle then		      Return i		    end if		  next		  Return -1		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub selectFrame(frameTitle as string)		  dim index as integer = frameIndex(frameTitle)		  if index < 0 then Return		  		  activeFrame = frames(index)		  Frames.Remove(index)		  Frames.Append(activeFrame)		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event LinkPerformed(fromFrame as contentFrame, toFrame as contentFrame)	#tag EndHook	#tag Hook, Flags = &h0		Event Open()	#tag EndHook	#tag Note, Name = About		FrameCanvas		By Alex Restrepo		send comments, suggestions, fixes to alexrestrepo@mac.com				A canvas that holds and oprionally links a series of frame objects.		use the option key to link objects between frames.				Events:		LinkPerformed(fromFrame as contentFrame, toFrame as contentFrame)		fired when 2 frames are linked together.				Open source under the Creative Commons Attribution License: If you decide to use it in your projects, please give me credit in your about window or documentation.		Use in whatever way you like... at your own risk :P		let me know if you find it useful.					#tag EndNote	#tag Property, Flags = &h21		Private activeFrame As contentFrame	#tag EndProperty	#tag Property, Flags = &h21		Private destinationFrame As contentFrame	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mdrawGrid			End Get		#tag EndGetter		#tag Setter			Set			  mdrawGrid = value			End Set		#tag EndSetter		drawGrid As boolean	#tag EndComputedProperty	#tag Property, Flags = &h21		Private frames() As ContentFrame	#tag EndProperty	#tag Property, Flags = &h0		GridSize As Integer = 9	#tag EndProperty	#tag Property, Flags = &h21		Private linkedObjects() As link	#tag EndProperty	#tag Property, Flags = &h21		Private linking As boolean	#tag EndProperty	#tag Property, Flags = &h21		Private links As dictionary	#tag EndProperty	#tag Property, Flags = &h21		Private linkx As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private linky As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mdrawGrid As boolean	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AcceptFocus"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AcceptTabs"			Visible=true			Group="Behavior"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Backdrop"			Visible=true			Group="Appearance"			Type="Picture"			EditorType="Picture"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="DoubleBuffer"			Visible=true			Group="Behavior"			InitialValue="False"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="drawGrid"			Visible=true			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="EraseBackground"			Visible=true			Group="Behavior"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="GridSize"			Visible=true			Group="Behavior"			InitialValue="20"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Group="Behavior"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			InheritedFrom="Canvas"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			InheritedFrom="Canvas"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass