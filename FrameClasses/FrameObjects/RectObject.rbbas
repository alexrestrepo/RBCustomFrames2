#tag ClassProtected Class RectObject	#tag Method, Flags = &h0		Sub doPaint(g as graphics)		  //here we trigger the painting of all the child objects		  dim oldColor as Color = g.forecolor		  Paint(g)		  g.ForeColor = oldColor		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function Height() As integer		  //the Height of an object can be dynamic (strings for example) depending on the width, so it's better to calculate it.		  Return calculateHeight		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Function TextHeight(text as string, textFont as string, textSize as integer, wrap as integer) As integer		  //small helper method		  dim tmp as Picture = NewPicture(2,2,16)		  if tmp = nil then Return 0		  		  tmp.Graphics.TextSize = textSize		  tmp.Graphics.TextFont = textFont		  Return tmp.Graphics.StringHeight(text, wrap)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function within(x as integer, y as integer) As boolean		  //hit test		  Return x >= self.X and x <= self.X + Width and y >= self.Y and y <= self.Y + Height		End Function	#tag EndMethod	#tag Hook, Flags = &h0		Event calculateHeight() As integer	#tag EndHook	#tag Hook, Flags = &h0		Event Paint(g as graphics)	#tag EndHook	#tag Hook, Flags = &h0		Event SizeChanged()	#tag EndHook	#tag Note, Name = About		RectObject		By Alex Restrepo		send comments, suggestions, fixes to alexrestrepo@mac.com				A simple rect-like object				Open source under the Creative Commons Attribution License: If you decide to use it in your projects, please give me credit in your about window or documentation.		Use in whatever way you like... at your own risk :P		let me know if you find it useful.					#tag EndNote	#tag Property, Flags = &h21		Private mWidth As Integer	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mWidth			End Get		#tag EndGetter		#tag Setter			Set			  mWidth = value			  SizeChanged			End Set		#tag EndSetter		Width As Integer	#tag EndComputedProperty	#tag Property, Flags = &h0		X As Integer	#tag EndProperty	#tag Property, Flags = &h0		Y As Integer	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="X"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Y"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass