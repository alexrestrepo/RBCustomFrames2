#tag ClassProtected Class PopupMenuObjectInherits TextObject	#tag Event		Sub init()		  handlesMouseEvents = true		  AddRow "Testing this"		  AddRow "-"		  AddRow "one"		  AddRow "two"		  AddRow "three"		End Sub	#tag EndEvent	#tag Event		Function MouseDown(mx as integer, my as integer, parentCanvas as frameCanvas, parentFrame as contentFrame) As boolean		  dim base as new MenuItem		  dim current as MenuItem		  		  for i as Integer = 0 to UBound(contents)		    current = new MenuItem(contents(i))		    if i = ListIndex then current.Checked = true		    base.Append(current)		  next		  		  base = base.PopUp(parentCanvas.Window.Left + parentCanvas.Left + parentFrame.x + x, parentCanvas.Window.top + parentCanvas.top + parentFrame.y + y)		  if base <> nil then		    ListIndex = IndexTable.value(base.Text)		  end if		  Return true		End Function	#tag EndEvent	#tag Method, Flags = &h0		Sub AddRow(text as string)		  contents.Append text		  IndexTable.Value(text) = UBound(Contents)		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function calcHeight() As integer		  Return 16		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(TextFont as string = "smallSystem", TextSize as integer =  0)		  // Calling the overridden superclass constructor.		  tags = new Dictionary		  IndexTable  = new Dictionary		  Super.Constructor("", TextFont, TextSize)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub gradient(g as graphics, startColor as color, endColor as color, x as integer, y as integer, width as integer, height as integer)		  #pragma DisableBackgroundTasks		  #pragma DisableBoundsChecking		  		  dim i as integer, ratio, endratio as Single		  		  // Draw the gradient		  for i = y to y+height - 1		    		    // Determine the current line's color		    ratio = (height - i + y) / height		    endratio = (i - y) / height		    g.ForeColor = RGB(EndColor.Red * endratio + StartColor.Red * ratio, EndColor.Green * endratio + StartColor.Green * ratio, EndColor.Blue * endratio + StartColor.Blue * ratio)		    		    // Draw the step		    g.DrawLine x, i, x+Width-1, i		  next		  'g.DrawRect x,y,width,height		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub paint(g as graphics)		  //draw a string...		  g.TextFont = textFont		  g.TextSize = textSize		  		  gradient(g, &cFFFFFF, &cAAAAAA, x, y, Width, Height)		  		  g.foreColor=&c999999		  g.DrawLine x + Width-13, y, x+Width-13, y + Height - 1		  		  g.DrawRoundRect x,y,Width,Height,5,5		  g.DrawPicture popupKnob, x + width-9, y + Height/2-5		  		  g.forecolor = &c000000		  g.DrawString contents(ListIndex), x + 4, y + (height + g.TextAscent) / 2 - 2, Width - 13 - 6, true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RowTag(row as integer, assigns value as variant)		  dim key as String  = contents(row)		  tags.value(row) = value		End Sub	#tag EndMethod	#tag Property, Flags = &h21		Private Contents() As string	#tag EndProperty	#tag Property, Flags = &h21		Private IndexTable As dictionary	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mListIndex			End Get		#tag EndGetter		#tag Setter			Set			  mListIndex = value			End Set		#tag EndSetter		ListIndex As Integer	#tag EndComputedProperty	#tag Property, Flags = &h21		Private mListIndex As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private Tags As dictionary	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="acceptsConnections"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="FrameObject"		#tag EndViewProperty		#tag ViewProperty			Name="handlesMouseEvents"			Group="Behavior"			InitialValue="0"			Type="boolean"			InheritedFrom="FrameObject"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="ListIndex"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="RectObject"		#tag EndViewProperty		#tag ViewProperty			Name="X"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="RectObject"		#tag EndViewProperty		#tag ViewProperty			Name="Y"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="RectObject"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass