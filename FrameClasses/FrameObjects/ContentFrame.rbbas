#tag ClassProtected Class ContentFrameInherits RectObject	#tag Event		Function calculateHeight() As integer		  //this one is static and only changes when objects are added		  Return Height		End Function	#tag EndEvent	#tag Event		Sub Paint(g as graphics)		  g.DrawPicture view, x, y		  highlight(g)		  '//the local graphics context		  'dim frameContents as Picture = new Picture(Width + 6, Height + 8, 32)		  '		  'frameContents.Graphics.FillRect 0,0,frameContents.Width,frameContents.Height		  'frameContents.Graphics.ForeColor = &cFFFFFF		  'frameContents.Graphics.FillRoundRect 0,0,Width,Height+2,15,15		  '		  'frameContents.Graphics.TextSize = textSize		  'frameContents.Graphics.TextFont = textFont		  '		  '//title backg		  'frameContents.Graphics.ForeColor = &cDCC0C9		  'frameContents.Graphics.FillRect 0,0,Width,frameContents.Graphics.TextAscent+4		  '		  '//title		  'frameContents.Graphics.ForeColor = &c000000		  'frameContents.Graphics.DrawString Title, (Width - frameContents.Graphics.StringWidth(Title))/2, frameContents.Graphics.TextAscent + 2		  '		  '//Separator		  'frameContents.Graphics.ForeColor = &c866972		  'frameContents.Graphics.DrawLine 0, frameContents.Graphics.TextAscent + 4, Width, frameContents.Graphics.TextAscent + 4		  '		  '//contents		  'for i as Integer = 0 to UBound(Contents)		  'contents(i).doPaint(frameContents.Graphics, highlight and selectedObject = contents(i))		  'next		  '		  '//frame		  'frameContents.Graphics.DrawRoundRect 0, 0 , Width, Height + 2, 15, 15		  '		  '//mask		  'frameContents.Mask.Graphics.ForeColor = &cffffff		  'frameContents.Mask.Graphics.FillRect 0, 0, frameContents.Width, frameContents.Height		  '		  'frameContents.mask.Graphics.DrawPicture blurmask, 0, 1 + frameContents.Height - blurmask.Height / 2, frameContents.Width, blurmask.Height, blurmask.Width / 2, blurmask.Height/2, 1, blurmask.Height		  'frameContents.mask.Graphics.DrawPicture blurmask, 0, 1 + frameContents.Height - blurmask.Height / 2, blurmask.Width/2, blurmask.Height, 0, blurmask.Height/2, blurmask.Width/2, blurmask.Height		  'frameContents.Mask.Graphics.DrawPicture blurmask, 1 + frameContents.Width - blurmask.Width/2, 0, blurmask.Width, frameContents.Height, blurmask.Width/2, blurmask.Height/2, blurmask.Width, 1		  'frameContents.Mask.Graphics.DrawPicture blurmask, 1 + frameContents.Width - blurmask.Width/2, 0, blurmask.Width/2, blurmask.Height/2, blurmask.Width/2,0,blurmask.Width/2,blurmask.Height/2		  'frameContents.Mask.Graphics.DrawPicture blurmask, 1 + frameContents.Width - blurmask.Width/2, 1 + frameContents.Height - blurmask.Height/2, blurmask.Width/2, blurmask.Height/2, blurmask.Width/2, blurmask.Height/2, blurmask.Width/2, blurmask.Height/2		  '		  'frameContents.Mask.Graphics.ForeColor = &c333333		  'frameContents.Mask.Graphics.fillRoundRect 0, 0 , Width, Height + 2, 15, 15		  '		  '//dump to global context		  'g.DrawPicture frameContents, x, y		End Sub	#tag EndEvent	#tag Event		Sub SizeChanged()		  for i as Integer = 0 to UBound(contents)		    contents(i).Width = self.Width - objectMargin * 2		  next		  checkObjectLocations		End Sub	#tag EndEvent	#tag Method, Flags = &h0		Sub appendObject(obj as FrameObject, ID as variant = nil)		  //appends a FrameObject to the contents of this Frame		  contents.Append(Obj)		  if ID = nil then		    obj.ID = UBound(contents)		  else		    obj.ID = ID		  end if		  		  //leave a small margin...		  //add it in the next available spot..		  obj.initWithSize(objectMargin, Height, Width - objectMargin * 2)		  'obj.x = 6		  'obj.Width = Width - 12		  '		  'obj.y = Height 		  		  calculateHeight //and recalculate the Height of the frame		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub appendSeparator()		  dim sep as new SeparatorObject		  appendObject(sep)		  sep.x = 0		  sep.Width = Width		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub calculateHeight()		  //calculate the full height of this object, accounting for the title and the contents..		  		  Height = 0		  		  //1. calculate the title's height.		  Height = TextHeight(Title, textFont, textSize, Width) + 4 //add a couple of extra pixels for spacing.		  		  //2. account for the height of the contents		  dim rectObj as RectObject		  for Each RectObj in contents		    Height = Height + RectObj.Height + ObjectSpacing		  next		  compose		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub checkObjectLocations()		  //after a link, some object may have changed size, so they have to be rearranged.		  		  Height = 0		  		  //1. calculate the title's height.		  Height = TextHeight(Title, textFont, textSize, Width) + 4 //add a couple of extra pixels for spacing.		  		  //2. and rearrange the contents		  dim rectObj as RectObject		  for Each RectObj in contents		    RectObj.y = Height		    Height = Height + RectObj.Height + ObjectSpacing		  next		  compose		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub compose()		  //the local graphics context		  dim frameContents as Picture = new Picture(Width + 6, Height + 8, 32)		  		  frameContents.Graphics.FillRect 0,0,frameContents.Width,frameContents.Height		  frameContents.Graphics.ForeColor = &cFFFFFF		  frameContents.Graphics.FillRoundRect 0,0,Width,Height+2,15,15		  		  frameContents.Graphics.TextSize = textSize		  frameContents.Graphics.TextFont = textFont		  		  //title backg		  frameContents.Graphics.ForeColor = &cDCC0C9		  frameContents.Graphics.FillRect 0,0,Width,frameContents.Graphics.TextAscent+4		  		  //title		  frameContents.Graphics.ForeColor = &c000000		  frameContents.Graphics.DrawString Title, (Width - frameContents.Graphics.StringWidth(Title))/2, frameContents.Graphics.TextAscent + 2		  		  //Separator		  frameContents.Graphics.ForeColor = &c866972		  frameContents.Graphics.DrawLine 0, frameContents.Graphics.TextAscent + 4, Width, frameContents.Graphics.TextAscent + 4		  		  //contents		  for i as Integer = 0 to UBound(Contents)		    contents(i).doPaint(frameContents.Graphics)		  next		  		  //frame		  frameContents.Graphics.DrawRoundRect 0, 0 , Width, Height + 2, 15, 15		  		  //mask		  frameContents.Mask.Graphics.ForeColor = &cffffff		  frameContents.Mask.Graphics.FillRect 0, 0, frameContents.Width, frameContents.Height		  		  frameContents.mask.Graphics.DrawPicture blurmask, 0, 1 + frameContents.Height - blurmask.Height / 2, frameContents.Width, blurmask.Height, blurmask.Width / 2, blurmask.Height/2, 1, blurmask.Height		  frameContents.mask.Graphics.DrawPicture blurmask, 0, 1 + frameContents.Height - blurmask.Height / 2, blurmask.Width/2, blurmask.Height, 0, blurmask.Height/2, blurmask.Width/2, blurmask.Height		  frameContents.Mask.Graphics.DrawPicture blurmask, 1 + frameContents.Width - blurmask.Width/2, 0, blurmask.Width, frameContents.Height, blurmask.Width/2, blurmask.Height/2, blurmask.Width, 1		  frameContents.Mask.Graphics.DrawPicture blurmask, 1 + frameContents.Width - blurmask.Width/2, 0, blurmask.Width/2, blurmask.Height/2, blurmask.Width/2,0,blurmask.Width/2,blurmask.Height/2		  frameContents.Mask.Graphics.DrawPicture blurmask, 1 + frameContents.Width - blurmask.Width/2, 1 + frameContents.Height - blurmask.Height/2, blurmask.Width/2, blurmask.Height/2, blurmask.Width/2, blurmask.Height/2, blurmask.Width/2, blurmask.Height/2		  		  frameContents.Mask.Graphics.ForeColor = &c333333		  frameContents.Mask.Graphics.fillRoundRect 0, 0 , Width, Height + 2, 15, 15		  		  //dump to global context		  view = frameContents		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Constructor(x as integer, y as integer, width as integer, title as string, textFont as string = "smallsystem", textSize as integer = 0)		  self.Title = title		  self.textFont = textFont		  self.textSize = textSize		  self.Width = width		  self.x = x		  self.y = y		  		  //calculate the initial Height, this is the point where new objects will be appended to the Frame		  calculateHeight		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub highlight(g as graphics)		  for i as Integer = 0 to UBound(Contents)		    if contents(i) = selectedObject then _		    contents(i).doHighlight(g, x, y)		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function MouseDown(mx as integer, my as integer, parent as Framecanvas) As boolean		  dim result as Boolean		  		  //if the event is not inside this frame...		  if not within(mx, my) then Return False		  		  //now, if the option key is down, find what object is the receiver of the event.		  selectedObject = nil		  'if Keyboard.AsyncOptionKey then		  		  result = true		  		  for i as Integer = 0 to UBound(contents)		    if contents(i).within(mx - x, my - y) then		      if not Keyboard.AsyncOptionKey and contents(i).handlesMouseEvents then		        result = Contents(i).doMouseDown(mx,my, parent, self)		        compose		        exit for		        		      elseif Keyboard.AsyncOptionKey  and contents(i).acceptsConnections then //coordinates are local inside the frame, so global coordinates have to be converted		        selectedObject = Contents(i)		        exit for		        		      end if		    end if		  next		  		  'end if		  		  oldx = mx		  oldy = my		  Return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MouseDrag(mx as integer, my as integer)		  //offset the frame		  X = X + (mx - oldX)		  Y = Y + (my - oldY)		  		  oldy = my		  oldx = mx		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function MouseMove(mx as integer, my as integer) As boolean		  //find what Object is under the mouse pointer...		  selectedObject = nil		  if not within(mx,my) then Return False		  for i as Integer = 0 to UBound(contents)		    if contents(i).within(mx - x, my - y) and contents(i).acceptsConnections  then		      selectedObject = Contents(i)		      exit for		    end if		  next		  		  Return selectedObject <> nil		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MouseUp(mx as integer, my as integer)		  //clear selection.		  selectedObject = nil		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub selectObject(forID as variant)		  for i as Integer = 0 to UBound(contents)		    if Contents(i).ID = forID then		      selectedObject = contents(i)		      Return		    end if		  next		End Sub	#tag EndMethod	#tag Note, Name = About		ContentFrame		By Alex Restrepo		send comments, suggestions, fixes to alexrestrepo@mac.com				This is a small table-like object, that holds any amount of FrameObjects.		It also handles different mouse-related events.				Open source under the Creative Commons Attribution License: If you decide to use it in your projects, please give me credit in your about window or documentation.		Use in whatever way you like... at your own risk :P		let me know if you find it useful.					#tag EndNote	#tag Property, Flags = &h0		contents() As FrameObject	#tag EndProperty	#tag Property, Flags = &h21		Private Height As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private mselectedObject As FrameObject	#tag EndProperty	#tag Property, Flags = &h21		Private mTitle As string	#tag EndProperty	#tag Property, Flags = &h21		Private oldX As Integer	#tag EndProperty	#tag Property, Flags = &h21		Private oldY As Integer	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mselectedObject			End Get		#tag EndGetter		#tag Setter			Set			  mselectedObject = value			End Set		#tag EndSetter		selectedObject As FrameObject	#tag EndComputedProperty	#tag Property, Flags = &h21		Private textFont As string	#tag EndProperty	#tag Property, Flags = &h21		Private textSize As Integer	#tag EndProperty	#tag ComputedProperty, Flags = &h0		#tag Getter			Get			  return mTitle			End Get		#tag EndGetter		#tag Setter			Set			  mTitle = value			End Set		#tag EndSetter		Title As string	#tag EndComputedProperty	#tag Property, Flags = &h21		Private view As picture	#tag EndProperty	#tag Constant, Name = objectMargin, Type = Double, Dynamic = False, Default = \"8", Scope = Public	#tag EndConstant	#tag Constant, Name = ObjectSpacing, Type = Double, Dynamic = False, Default = \"2", Scope = Private	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Title"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="RectObject"		#tag EndViewProperty		#tag ViewProperty			Name="X"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="RectObject"		#tag EndViewProperty		#tag ViewProperty			Name="Y"			Group="Behavior"			InitialValue="0"			Type="Integer"			InheritedFrom="RectObject"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass